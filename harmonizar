
// AREA DE ESTUDIO



// IMPORTAR COLECCION DE IMAGENES

var surfaceReflectanceL4 = ee.ImageCollection('LANDSAT/LT04/C02/T1_L2');
var surfaceReflectanceL5 = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2');
var surfaceReflectanceL7 = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2');
var surfaceReflectanceL8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2');


//FACTORES DE CORRECCION DN-> reflectancia [0,1]

// var col1_SR = col1_DN.map(function(image){return image.multiply(0.0001)})

var col2_DN = ee.ImageCollection("LANDSAT/LE07/C02/T1_L2");
var col2_SR = col2_DN.map(function(image){return image.multiply(0.0000275).add(-0.2)})

// Harmonization is achieved via linear transformation of ETM+ spectral space to OLI spectral space
// ETM+ (ET) -> OLI
// coefficients presented in Roy et al. (2016) 
// y-intercept values are multiplied by 10,000 to match the scaling of USGS Landsat surface reflectance data


var coefficients = {
  itcps: ee.Image.constant([0.0003, 0.0088, 0.0061, 0.0412, 0.0254, 0.0172])
             .multiply(10000),
  slopes: ee.Image.constant([0.8474, 0.8483, 0.9047, 0.8462, 0.8937, 0.9071])
};

// ETM+ and OLI band names for the same spectral response window are not equal and need to be standardized
// ETM+ es igual a ET


// Function to get and rename bands of interest from OLI.

function renameOli(img) {
  return img.select(
      ['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'pixel_qa'],
      ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2', 'pixel_qa']);
}

// Function to get and rename bands of interest from ETM+.
function renameEtm(img) {
  return img.select(
      ['B1', 'B2', 'B3', 'B4', 'B5', 'B7', 'pixel_qa'],
      ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2', 'pixel_qa']);
}



// ETM+ space to OLI space

function etmToOli(img) {
  return img.select(['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2'])
      .multiply(coefficients.slopes)
      .add(coefficients.itcps)
      .round()
      .toShort()
      .addBands(img.select('pixel_qa')); //aqui cambiar el nombre del pixel qa para la coleccion 2
}


// Cloud and shadow masking

// CFmask (Zhu et al., 2015) pixel_qa
// set pixels identified as cloud and cloud shadow to null.

function fmask(img) {
  var cloudShadowBitMask = 1 << 3;
  var cloudsBitMask = 1 << 5;
  var qa = img.select('pixel_qa');
  var mask = qa.bitwiseAnd(cloudShadowBitMask)
                 .eq(0)
                 .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return img.updateMask(mask);
}

// indices

function calcNbr2(img) {
  return img.normalizedDifference(["SWIR1", "SWIR2"]).rename("NBR2");
}

function calcNdvi(img) {
  return img.normalizedDifference(["NIR", "Red"]).rename("NDVI");
}

// function calcVnsir(img) {
//   var NIR = img.select("NIR")
//   var SWIR = img.select("SWIR")
//   var Red = img.select("Red")
//   var Green = img.select("Green")
//   var Blue = img.select("Blue")
//   return expression(1-((2*img[Red]-img[Green]-img[Blue]+3*(img[SWIR2]-img[NIR])))).rename("VNSIR")
// }

// Funciones finales

// Funcion para imagenes OLI

// function prepOli(img) {
//   var orig = img;
//   img = renameOli(img);
//   img = fmask(img);
//   Nbr2 = calcNbr2(img);
//   Ndvi = calcNdvi(img);
//   return ee.Image(img.copyProperties(orig, orig.propertyNames()));
// }

// // Funcion para imagenes ETM

// function prepEtm(img) {
//   var orig = img;
//   img = renameEtm(img);
//   img = fmask(img);
//   img = etmToOli(img);
//   Nbr2 = calcNbr2(img);
//   Ndvi = calcNdvi(img);
//   return ee.Image(img.copyProperties(orig, orig.propertyNames()));
// }

// // Funcion para imagenes ET

// function prepEt(img) {
//   var orig = img;
//   img = renameEt(img);
//   img = fmask(img);
//   img = etToOli(img);
//   Nbr2 = calcNbr2(img);
//   Ndvi = calcNdvi(img);
//   return ee.Image(img.copyProperties(orig, orig.propertyNames()));
// }

// Define function to prepare OLI images.

function prepOli(img) {
  var orig = img;
  img = renameOli(img);
  img = fmask(img);
  img = calcNbr2(img);
  return ee.Image(img.copyProperties(orig, orig.propertyNames()));
}

// Define function to prepare ETM+ images.
function prepEtm(img) {
  var orig = img;
  img = renameEtm(img);
  img = fmask(img);
  img = etmToOli(img);
  img = calcNbr2(img);
  return ee.Image(img.copyProperties(orig, orig.propertyNames()));
}

// ejemplo

// 35+ year time series and display the spectral history for a single pixel

// Define an area of interest (AOI)

var aoi = ee.Geometry.Point([-121.70938, 45.43185]);

// Get Landsat USGS surface reflectance collections for OLI, ETM+, and TM.

var oliCol = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR'); // cambiar a C02/T1_L2
var etmCol = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR');
var tmCol = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR');

// Define an image collection filter

var colFilter = ee.Filter.and(
    ee.Filter.bounds(aoi), ee.Filter.calendarRange(182, 244, 'day_of_year'),
    ee.Filter.lt('CLOUD_COVER', 10), ee.Filter.lt('GEOMETRIC_RMSE_MODEL', 10),
    ee.Filter.or(
        ee.Filter.eq('IMAGE_QUALITY', 9),
        ee.Filter.eq('IMAGE_QUALITY_OLI', 9)));


// Filter collections and prepare them for merging.

oliCol = oliCol.filter(colFilter).map(prepOli);
etmCol = etmCol.filter(colFilter).map(prepEtm);
tmCol = tmCol.filter(colFilter).map(prepEtm);

// Merge the collections.

var col = oliCol.merge(etmCol).merge(tmCol);

// print(col)

// Inter-sensor harmony can be assessed qualitatively by plotting all observations as a scatter plot 
// NBR value must be added to each image as a property

var allObs = col.map(function(img) {
  var obs = img.reduceRegion(
      {geometry: aoi, reducer: ee.Reducer.median(), scale: 30});
  return img.set('NBR', obs.get('NBR2'));
});

// Diagrama de dispersion agrupado por sensor

var chartAllObs =
    ui.Chart.feature.groups(allObs, 'system:time_start', 'NBR', 'SATELLITE')
        .setChartType('ScatterChart')
        .setSeriesNames(['TM', 'ETM+', 'OLI'])
        .setOptions({
          title: 'All Observations',
          colors: ['f8766d', '00ba38', '619cff'],
          hAxis: {title: 'Date'},
          vAxis: {title: 'NBR'},
          pointSize: 6,
          dataOpacity: 0.5
        });
print(chartAllObs);

// para que sirven los reductores?

print(allObs)