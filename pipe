var coefficients = {
  itcps: ee.Image.constant([0.0003, 0.0088, 0.0061, 0.0412, 0.0254, 0.0172])
             .multiply(10000),
  slopes: ee.Image.constant([0.8474, 0.8483, 0.9047, 0.8462, 0.8937, 0.9071])
};

// Function to get and rename bands of interest from OLI.
function renameOli(img) {
  return img.select(
      ['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'pixel_qa'],
      ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2', 'pixel_qa']);
}

// Function to get and rename bands of interest from ETM+.
function renameEtm(img) {
  return img.select(
      ['B1', 'B2', 'B3', 'B4', 'B5', 'B7', 'pixel_qa'],
      ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2', 'pixel_qa']);
}

function etmToOli(img) {
  return img.select(['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2'])
      .multiply(coefficients.slopes)
      .add(coefficients.itcps)
      .round()
      .toShort()
      .addBands(img.select('pixel_qa'));
}


// Cloud and shadow masking

// Collection 1 QA

// Bit 0: Fill
// Bit 1: Clear
// Bit 2: Water
// Bit 3: Cloud Shadow
// Bit 4: Snow
// Bit 5: Cloud
// Bits 6-7: Cloud Confidence
// 0: None
// 1: Low
// 2: Medium
// 3: High
// Bits 8-9: Cirrus Confidence
// 0: None
// 1: Low
// 2: Medium
// 3: High
// Bit 10: Terrain Occlusion

function fmask(img) {
  var cloudShadowBitMask = 1 << 3; //Cloud shadow
  var cloudsBitMask = 1 << 5;      // Cloud
  var qa = img.select('pixel_qa');
  var mask = qa.bitwiseAnd(cloudShadowBitMask)
                 .eq(0)
                 .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return img.updateMask(mask);
}

// Indice multiespectral 

function calcNbr(img) {
  return img.normalizedDifference(['NIR', 'SWIR2']).rename('NBR');
}

// Define function to prepare OLI images (L8)

function prepOli(img) {
  var orig = img;
  img = renameOli(img);
  img = fmask(img);
  img = calcNbr(img);
  return ee.Image(img.copyProperties(orig, orig.propertyNames()));
}

// Define function to prepare ETM+ (L5 y 7) images.

function prepEtm(img) {
  var orig = img;
  img = renameEtm(img);
  img = fmask(img);
  img = etmToOli(img);
  img = calcNbr(img);
  return ee.Image(img.copyProperties(orig, orig.propertyNames()));
}

// Area de interes
// var aoi = ee.Geometry.Point([-121.70938, 45.43185]);
var aoi  = geometry;

// Colecciones L8,7 y 5
var oliCol = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR');
var etmCol = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR');
var tmCol = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR');

// Filter
var colFilter = ee.Filter.and(
    ee.Filter.bounds(aoi), ee.Filter.calendarRange(182, 244, 'day_of_year'),
    ee.Filter.lt('CLOUD_COVER', 50), ee.Filter.lt('GEOMETRIC_RMSE_MODEL', 10), // cobertura de nubes menor a 50%, GEOMETRIC_RMSE_MODEL menor a 10 
    ee.Filter.or(
        ee.Filter.eq('IMAGE_QUALITY', 9), // calidad de la imagen igual a 9
        ee.Filter.eq('IMAGE_QUALITY_OLI', 9))); //  o en el caso de OLI calida de la imagen igual a 9---- 9 = best
        
// Scala y offset

function applyScaleFactors(image) {
  var opticalBands = image.select('B.').multiply(0.0001); // solo bandas opticas;
  return image.addBands(opticalBands, null, true);
}

        
// Filter collections and prepare them for merging.

oliCol = oliCol.filter(colFilter).map(prepOli);
etmCol = etmCol.filter(colFilter).map(prepEtm);
tmCol = tmCol.filter(colFilter).map(prepEtm);

// Merge the collections.
var col = oliCol.merge(etmCol).merge(tmCol);

// Get a single image for testing
oliCol = oliCol.filter(colFilter);
var image = ee.Image(oliCol.first());
print(image);
var image_mask = ee.Image(prepOli(image));
print(image_mask);
var image_scaled = ee.Image(applyScaleFactors(image));
var image_sacled_mask = ee.Image(prepOli(image_scaled));
print(image_sacled_mask);

// PLOTS

var visParams = {
  bands: ["NBR"],
  min: -1,
  max: 1,
  gamma: 1.4,
};
Map.setCenter(114.0079, -26.0765, 9);
Map.addLayer(image_sacled_mask, visParams, "NBR_scaled_masked");

var visParams = {
  bands: ['B4', 'B3', 'B2'],
  min: 0,
  max: 3000,
  gamma: 1.4,
};
Map.setCenter(114.0079, -26.0765, 9);
Map.addLayer(image, visParams, "original");